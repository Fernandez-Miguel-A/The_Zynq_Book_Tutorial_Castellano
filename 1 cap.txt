

                                            Introducción:
    Éste tutorial lo guiará a travez del proceso de creación de su primer diseño en Zynq utilizando el IDE Vivado
y lo orientará en el manejo del ambiente integrador de modulos para generar un sencillo diseño que utilize el
procesador Zynq,  para luego implementarlo en una placa de desarrollo Zynq. El Equipo para desarrollo de
controladores/programas (SDK - Software Development Kit) será utilizado para crear un sencillo controlador que se
ejecutará en el sistema de procesamiento ARM de Zynq (PS - Processing System) para que controle el hardware que
se implementa en seccion programable (PL - Programmable Logic).


    Éste tutorial esta separado en tres ejercicios y se organiza como sigue:

 Ejercicio 1A - Éste ejercicio lo guiará para que pueda iniciar el IDE de Vivado, así como para crear su primer
 proyecto. Además se explicarán las distintas etapas del asistente de "creación de un proyecto nuevo".

 Ejercicio 1B - En éste ejercicio usaremos el proyecto que fue creado en el Ej. 1A para construir un sencillo
 sistema embebido Zynq, con la herramienta gráfica "Integrador de modulos", e incorporar algunos de los modulos del
 catálogo de Vivado. Serán utilizados varios componentes auxiliares de diseño en éste ejercicio, como por ejemplo
 el asistente de "Automatización de placa" que automatiza la personalización de modulos para un dispositivo ó placa
 especificada. Así como el componente de "Asistencia al diseñador", que le ayuda con el proceso de conexionado
 entre la seccion de procesamiento de Zynq y el modulo de la seccion programable, lo cual será desarrollado más abajo.

    Una vez que ha finalizado el diseñado, se seguirá unos cuantos pasos más para completar el sistema hardware
 y generar el "bitstream" (trama binaria), de ahora en más "el binario"; que será implementado en la seccion programable.
 El diseño hardware finalizado será exportado al Equipo de desarrollo de controladores [SDK] para el desarrollo de
 su, rudimentario, controlador  en el Ej 1C.

 Ejercicio 1C - En éste ejercicio, el tercero pero pequeño, el Equipo de desarrollo de controladores [SDK] será
 introducido y un sencillo controlador será creado para permitir al procesador de Zynq interactuar con el modulo en la
 seccion programable. Una conexión al hardware sirve de vinculo para que el SDK pueda establecer comunicación con el
 procesador Zynq. Los controladores que son automaticamente creados por el IDE Vivado para modulos construidos, serán
 explorados e integrados al programa antes de que termine la construccion y ejecución sobre la Zynq.


        Nota:  A lo largo de todo el ejercicio del tutorial practico será utilizado "C:/Zynq_Book" como el directorio
 de trabajo (carpeta). Si usted no la tiene allí, puede sustituir por la ubicacion y carpeta que usted elija, pero
se advierte que se requerirá alterar algunos archivos fuentes para completar los ejercicios exitosamente.







1                            Primer Diseño en Zynq


 Ejercicio 1A - Mi primer diseño en el ambiente de integracion


    En éste ejercicio crearemos un proyecto nuevo en el IDE Vivado recorriendo las etapas del
asistente de "creación de un proyecto nuevo".



| Zybo | La placa Zybo requiere un paso adicional para establecer el componente predeterminado correctamente.
Éste es necesario porque Vivado 2015.1 no contiene las componentes para la placa de desarrollo Zybo. Si ya tiene
configurado Vivado 2015.1 con los componentes para la placa de desarrollo Zybo, usted puede saltar este
procedimiento y comenzar en el paso (a).

        Una vez que halla copiado los archivos fuente a "C:/Zynq_Book", valla a la carpeta:
            "C:/Zynq_Book/sources/zybo/setup/board_part"
        En esta carpeta verá un archivo nombrado como "zybo". Este contiene los componentes de la placa para la
Rev. B3 de la placa de desarrollo ZYBO. Tambien usted puede verificar la revision de su ZYBO al inspeccionar el 
botón debajo de su placa. Actualizar los componentes de placa puedes adquirirse desde el sitio de internet de 
Digilent utilizando el siguiente enlaze:
        "https://reference.digilentinc.com/vivado:boardfiles"
        Copie el archivo "zybo" con click derecho (desde el mouse) sobre el archivo y seleccionando "Copiar" como
se muestra debajo:

                |  fig1.png  |
    
        Abra una segunda ventana ventana y navege hasta la siguiente ubicacion
en la carpeta de instalación de Vivado 2015.1:

    Nota: Por defecto los programas se instalan en la carpeta "C:\archivos de programa" o "C:\programs files" o
"C:\programs files (x86)", puede buscar alli. Otro modo de averiguar donde se instalo es hacer click derecho
(con el mouse) en el acceso directo de Vivado que se creo al instalarlo en su escritorio, luego seleccione la
opcion "Abrir Ubicacion" como la que esta en la figura (dependiendo de la version de su sistema operativo esta
opcion puede aparecer arriba o abajo):

                |  fig2 (a).png  |         |  fig2 (b).png  |

        ** "{ Carpeta de instalación de Vivado }/2015.1/data/boards/board_part/zynq"

        Ésta carpeta es la responsable de que todos los componentes de placas de las diferentes placas Zynq
puedan ser utilizadas en Vivado 2015.1 Desing Suite. Ahora se añadirá la placa de desarrollo ZYBO a esta carpeta.
Podrá encontrar que el archivo llamado zybo ya existe, ignorelo y sigua con el siguiente procedimiento. Tecla
derecha del mouse sobre un espacio vacio dentro de la carpeta ** y seleccione "Pegar" como se ve debajo:

                |  fig3.png  |

        Una ventana de diálogo puede aparecer preguntando si desea combinar/reemplazar la carpeta "zybo", si es
que ya existe esa carpeta en **. Seleccione Si/Yes.

        Ahora usted ha añadido exitosamente el componente de placa para ZYBO a Vivado 2015.1 Desing Suite.


| Ambas | Comenzaremos abriendo el IDE Vivado.

    (a) Para abrir Vivado haga doble click en el icono de Vivado del escritorio ó desde Inicio>Todos los 
Programas> Xilinx Design Tools > Vivado 2015.1> Vivado 2015.1.
    
    (b) Cuando cargue Vivado le presentará una pantalla de bienvenida tal como la figura 1.1:

    (c) Seleccione la opcion "crear proyecto nuevo" [create new project] y el asistente de "proyecto nuevo"
[new project] se abrirá, tal como la figura 1.2:

    Seleccione siguiente [Next].

    (d) En el diálogo de nombre de proyecto, ingrese primer_construccion_zynq como nombre de proyecto,
(Project name), y la ruta "C:/Zynq_Book" en ubicacion de proyecto [Project location].

    Asegurese de que halla seleccionado la opcion "crear subcarpeta de proyecto" [create project subdirectory],
todas las opciones deben ser las mismas que las mostradas debajo:

    Seleccione siguiente [Next].

    Una carpeta llamada Zynq_Book se creará en "C:/" si es que "C:/Zynq_Book" NO fué creada.

    (e) En el diálogo de tipo de proyecto [Project type] seleccione proyecto RTL y asegurese
de que la opcion "No especificar archivos fuentes esta vez" [Do not specify sources at this time] se 
encuentre desmarcada, es decir que NO este seleccionada:

    Seleccione siguiente [Next].

    (f) Dentro del diálogo añadir fuentes [Add Sources] seleccione VHDL como el lenguaje de implementacion
elegido, en el campo target languaje, y como Simulador a Mixto [Mixed], en el campo Simulator 
Languaje.

    Si existen archivos fuente del tipo HDL ó archivos netlist para añadir al proyecto, se los puede 
añadir en ésta etapa.

    Como NO hemos tenido que añadir ningun archivo fuente al proyecto, seleccionamos siguiente [Next].

    (g) Añadir modulos existentes (opcional) al seleccionarlo se abrirá una ventana de diálogo.

    Si existen archivos fuente de modulos que utilize el proyecto, se los puede añadir aqui.

    Como NO hemos tenido que añadir ningun archivo fuente de ningun modulo al proyecto, seleccionamos 
siguiente [Next].

    (h) Añadir restriciones (opcional), al seleccionarlo se abrirá una ventana de diálogo.

    Ésta es la etapa donde cualquier archivo de restriciones [CONSTRAINTS] físicas o de temporizado
se puede añadir al proyecto.

    Como NO hemos tenido que añadir ningun archivo de restriciones (CONSTRAINTS) al proyecto, seleccionamos 
siguiente [Next].

    (i) Desde la ventana de diálogo de la parte predeterminada:

 | Zed | Seleccione placas [boards] desde el diálogo selector, luego luego de la lista de nombres exhividos
[display name] seleccione ZedBoard Zynq Evaluation and Development Kit (Equipo de Evaluacion y desarrollo
ZedBoard de Zynq), despues en la lista de revisión de la placa elija Todos [All], tal y como se muetra en
la figura 1.3:
    Seleccione la revisión apropiada para su placa en particular (en éste caso se ha seleccionado Rev.D).

    Seleccione siguiente [Next].

| Zybo | Seleccione placas [boards] desde el diálogo selector, luego de la lista de nombres exhividos
[display name] seleccione ZYBO, despues en la lista de revisión de la placa elija Todos [All], tal y como se 
muetra en la figura 1.4:
    Seleccione la revisión apropiada para su placa en particular (en éste caso se ha seleccionado Rev.B.3).

    Seleccione siguiente [Next].


| Ambas | (j) En el diálogo de "resumen del proyecto nuevo" [New Project Summary], revise las opciones 
elegidas y seleccione finalizar [Finish] para crear el proyecto nuevo.

-----------------------------------------------------------------------------------------------------------

    Ahora ya hemos creado nuestro primer proyecto en el IDE Vivado, podemos ir a crear nuestro primer
diseño de sistema embebido de Zynq.

    Antes de hacer ésto, se debe hacer introduccion a la capa de herramientas del IDE Vivado. Se 
muestra la capa del ambiente del IDE Vivado en la figura 1.5, otras capas pueden ser elegidas al 
seleccionar las diferentes perspectivas. Ésta capa esta especificamente dirigida para la ZedBoard. Si
usted esta utilizando ZYBO, verá una capa ligeramente diferente.

    Con referencia a las etiquetas numeradas en la figura 1.5 los componentes principales del IDE 
Vivado son:

    1. Barra de Menues - La barra de acceso principal da acceso al los comandos del IDE Vivado.

    2. Barra de herramientas - La barra de herramientas principal le provee un acceso facil a los
 comandos del IDE Vivado que más comunmente se utilizan. La Etiqueta de información y sugerencias
 llamada tooltips provee información de cada comando en la barra de herramientas y éstos pueden ser 
visualizados al pasar el mouse por encima de los botones, como en la figura 1.6:

    3. El espacio de trabajo - Éste le provee una gran area para paneles que requieran un espacio
de ventana amplio y para aquellos con interfaz gráfica, tales como:

    *Panel de esquemáticos.
    *Panel del dispositivo.
    *Panel del paquete.
    *Panel del editor de texto.

    4. La barra de estado del proyecto - Dicha barra exhive el estado del diseño activo actual.

    5. Navegador de flujo - Éste navegador le provee un facil acceso a las herramientas y comandos
 que son necesarios para guiar su diseño de principo a fin, comenzando con la seccion del 
 administrador de proyecto con un campo de diseño y finalizando con el generador "Binario"
 [bitstream] en la seccion de Programa y depuración. Ejecutar comandos esta disponible
 en la seccion de simulación, sintesis e implementación, para simular, sintetizar e implementar
el diseño que esta activo.

    6. Ventana de datos - Aquí, de forma predeterminada, se exhive información relativa a los datos
de diseño y los archivos fuente, incluyendo:

    *Ventana de atributos - Muetra información sobre los objetos logicos seleccionados y los 
recursos del dispositivo.

    *Ventana Netlist - Le provee una vista jerárquica sobre el diseño logico que se elaboro ó
sintetizo.

    *Ventana de archivos fuente - Muestra los archivos fuente de modulos, jerárquicamente, 
librerías y vistas de las ordenes de la compilación.

    7. Barra de estado global - Ésta barra exhive una variedad de información incluyendo:

    *Información detallada con respecto a la barra de menues y de los comandos de la barra de 
herramientas. Todo será exhivido el la esquina inferior izquierda cuando el comando es accedido.

    *Al pasar el mouse por encima de un objeto en la ventana esquemática, el detalle del objeto
aparecerá en ésta barra.

    *Al restringir (constraints) y alojar la creación en la ventana de paquete y dispositivo,
validación y tipo de restricción será exhivido del lado izquiedo de esta barra. Pero del lado 
derecho las coordenadas del sitio y el tipo.

    *La barra de progreso de la tarea en proceso se ubica del lado derecho de la barra de estado
global, cuando se selecciona el botón "background" ( fondo ).


    8. Ventana de Resultados de Area - La ventana de resultados muestra el estado y resultado de
los comandos en un conjunto de ventanas agrupadas abajo del ambiente del IDE Vivado. Asi como
el progreso de comandos, se generan mensajes mientras que se crean los archivos de seguimiento 
(log files) y los reportes. La información relativa a ésto se muestra aquí, las ventanas 
predeteerminadas son:

    *Mensajes - Muestra todos los mensajes para el diseño activo.

    *Consola Tcl - Se pueden ingresar comandos Tcl aquí y un historial de comandos previos y
mensajes de salida estan disponibles.

    *Reportes - Se provee acceso rápido a los reportes generados a travez del flujo de diseño.

    *Información de seguimiento (Log) - Muestra a los archivos de seguimiento generados por el
 proceso de simulación, síntesis e implementación.

    *Ejecución de diseño - Administra la ejecución del proyecto actual.

    Pueden aparecer ventanas adicionales en ésta área cuando así se la requiera, Ventana del
resultado de busquedas, ventanas de resultados de temporizado y ventana de los pines del paquete.



    Hecha la debida introduccion a la Capa del ambiente del IDE Vivado, ahora sí podemos ir a 
crear nuestro sistema Zynq.








Ejercicio 1B - Creando un sistema Zynq en Vivado

    En éste ejercicio crearemos un sistema embebido Zynq simple que implemente un controlador de
los pines de entrada/salida en la seccion de logica programable del dispositivo Zynq. El 
controlador de GPIO se conecta a los leds. Tambien se puede conectar al procesador Zynq via 
conexión de un bus AXI, permitiendo que los leds sean controlados por programa, lo cual se 
creará en el Ej 1C.

    Se provee una representación gráfica del diseño embebido de Zynq en la figura 1.7:

    Comenzaremos por crear un diseño por bloques nuevo en el IDE Vivado.

    (a) En la ventana de navegación de flujo, seleccionamos 'crear un diseño por bloques' de la
seccion del integrador de Cores de I.P., tal y como se muestra en la figura 1.8:

    La ventana de diálogo para crear un diseño por bloques se abrirá.

    (b) Ingrese primer_sistema_zynq en el bloque del nombre del diseño, ver figura 1.9:

    Seleccione Ok. El ambiente del diagrama integrador de Cores de I.P. de Vivado se abrirá en
el espacio de trabajo.

    El primer bloque que añadiremos a nuestro diseño será el sistema de procesamiento Zynq.

    (c) En el ambiente del diagrama integrador, haga click derecho con el mouse y seleccione
añadir Cores de I.P. (add IP), tal y como en la figura 1.10.

    Alternativamente, seleccione el botón añadir Cores de I.P. (add IP) en la barra de herramientas
a la izquierda del ambiente, asi como en la figura 1.11.

    Se abrirá la ventana flotante del catalogo de Cores de I.P., ver figura 1.12.

    (d) Ingrese "zynq" en el campo de busqueda y seleccione "ZYNQ7 Processing System", figura 1.13.
Preste atención de NO seleccionar la version ".. BMF", luego presione Enter en su teclado.

    Usted debe ver un mensaje similar al siguiente en la ventana de la consola de Tcl para 
confirmar que el proceso tubo (indeed) ha sido añadido al diseño correctamente:

    "create_bd_cell ‐type ip ‐vlnv xilinx.com:ip:processing_system7:5.5 processing_system7_0"

    Mensajes como este se exhiviran en la ventana de la consola de Tcl para todas las acciones
realizadas en el bloque integrado de Cores de I.P. .

    El siguiente paso es conectar los puertos de la interfaz, DDR y FIXED_IO en la seccion de PS
de la Zynq a los puertos de la interfaz de más alto nivel sobre el diseño.

    (e) Seleccione la opcion de ejecución de automatización del bloque (Run Block Automation),
del mensaje del asitente de diseño, en la parte superior de la ventana de diagrama, ver
figura 1.14. 

    En el diálogo de ejecución de automatización del bloque (Run Block Automation), 
asegurese de que la opción "Apply Board Preset" este seleccionada, entonces seleccione OK.
Las conecciones externas para las dos interfaces, DDR y FIXED_IO ahora serán generadas.

    Su diagrama de bloque ahora debe parecerse a:

 | Zed | la figura 1.15.

    Como la plataforma ZedBoard es la placa de desarrollo destino, y esta fue especificada
el la creación del proyecto, Vivado configurará en consecuencia el bloque del procesador Zynq.

| Zybo | la figura 1.16.

    Como la plataforma ZYBO es la placa de desarrollo destino, y esta fue especificada
el la creación del proyecto, Vivado configurará en consecuencia el bloque del procesador Zynq.


| Ambas | Ahora que la seccion de PS de la Zynq ha sido añadido y configurado a nuestro diseño, ahora 
podemos añadir más bloques que serán alojados en la seccion de PL de la Zynq para añadir funcionalidad
al sitema. En éste caso solo añadiremos un único bloque, AXI GPIO, que nos permitirá acceder a 
los leds en la placa de desarrollo.

    (f) Haga click derecho en un lugar vacio dentro de la ventana de Diagramas y seleccione añadir
Cores de I.P. (add IP). Ingrese GPIO en el campo de busqueda y añada la instancia de AXI GPIO.

    Ahora utilizaremos la herramienta el asistente de diseño integrador de Cores de I.P. para
automatizar la conexión del bloque AXI GPIO al "ZYNQ7 Processing System" (Sistema de procesamiento
de Zynq septima generacion).

    (g) Haga click en Ejecución de Automatización de Conexión, (Run Connection Automation) del 
mensaje del asitente de diseño, en la parte superior de la ventana de diagrama, y seleccione
/axi_gpio_0/S_AXI, ver figura 1.17.

    Ésto automatizará el proceso de conexión del GPIO al puerto AXI y automaticamente instanciará
dos bloques más:

    *Modulo de reinicio del sistema procesador (Processor System Reset Module) - Que proveerá de 
un reinicio personalizado para un sistema de procesamiento completo, incluyendo los perisféricos,
conexiónes y el propio procesador.

    *Interconexión AXI (AXI Interconnect) - Provee una interconexión del tipo AXI para el sistema,
permitiendo que más Cores de I.P. y perisféricos de la seccion de PL se comuniquen con el sitema
de procesamiento principal.

    Seleccione OK.

    Todas las conexiónes entre los bloques deben realizarse automaticamente.

    (h) Se requiere una última conexión para conectar el bloque AXI GPIO a los leds en la
placa de desarrollo. ésto tambien se puede completar utilizando el asistente de diseño.


 | Zed | Haga click en Ejecución de Automatización de Conexión, (Run Connection Automation) del 
mensaje del asitente de diseño, en la parte superior de la ventana de diagrama. Se abrirá la
ventana de ejecución de automatización de conexión, como muestra la figura 1.18:

    Seleccione /axi_gpio_0/GPIO.

    Seleccione leds_8bits del menu desplegable en el campo 'seleccion de la interfaz de la placa'
(Select board part interface). Y luego seleccione OK.

    La interfaz de gpio del bloque AXI GPIO ahora se conectará a los leds de la placa de desarrollo
y su diseño completo se debe parecer al de la figura 1.19:

    Las posiciones de los bloques individuales de su diseño pueden variar ligeramente a la figura
1.19, pero los bloques y las conexiónes deben ser las mismas.


| Zybo | Haga click en Ejecución de Automatización de Conexión, (Run Connection Automation) del 
mensaje del asitente de diseño, en la parte superior de la ventana de diagrama. Se abrirá la
ventana de ejecución de automatización de conexión, como muestra la figura 1.20:

    Seleccione /axi_gpio_0/GPIO.

    Seleccione leds_4bits del menu desplegable en el campo 'seleccion de la interfaz de la placa'
(Select board part interface). Y luego seleccione OK.

    La interfaz de gpio del bloque AXI GPIO ahora se conectará a los leds de la placa de desarrollo
y su diseño completo se debe parecer al de la figura 1.21:

    Las posiciones de los bloques individuales de su diseño pueden variar ligeramente a la figura
1.21, pero los bloques y las conexiónes deben ser las mismas.


| Ambas | El integrador de Cores de I.P. automaticamente asignará un ruteo de memoria para todos
los Cores de I.P. que estan presentes en el diseño. No cambiaremos el ruteo de memoria en este
tutorials, pero para referencias futuras hecharemos un vistaso al editor de direcciones.

    (i) Seleccione la pestaña del editor de direcciones en la parte superior de la ventana de 
la ventana del espacio de trabajo, como se ve en la figura 1.22, una vez allí abra el elemento
'+ Data' (datos) para ver más detalles.

    Podrá ver que el integrador de Cores de I.P. ya ha asignado un rute de memoria (el ruteo
de las secciones especificas de memoria a los registros de memoria-ruteada de los bloques de
los Cores de I.P. en la seccion de PL) a la interfaz AXI GPIO y que es del rango de los 64K.

    Ahora que su sitema esta completo, debemos primero validar el diseño antes de generar los
archivos de diseños HDL.

    (j) Guarde su diseño al seleccionar Archivo > Guardar bloque de diseño,
 (File > Save Block Desing), de la barra de menues.

    (k) Valide el diseño al seleccionar Herramientas > Validar Diseño,
(Tools > Validate Desing), de la barra de menues. Ésto ejecutará el verificado de reglas de diseño
(Desing-Rules-Check ó  DRC).
                                                           __
    Alternativamente, seleccione el botón validar diseño, |./|, de la barra de herramientas
                                                           ¯¯
principal, ó haga click derecho dentro del ambiente de Diagramas y seleccione validar diseño.

    (l) Debe aparecer un diálogo de validación de diseño, para confirmar que la validación del
diseño ha sido exitosa. Seleccione OK para descartar el mensaje.

    Con el diseño correctamente validado, podemos ir a la generación de archivos HDL para el
sistema.

    (m) Cambie a la pestaña Archivos Fuente (SOURCES), al seleccionar ventana > archivos fuente,
(Window > Sources), de la barra de menues.

    (n) En la ventana Archivos Fuente, haga click derecho sobre el diseño de sistema de alto nivel,
que en este caso el primer_sistema_zynq y seleccione crear vinculador HDL, (Create HDL Wrapper),
tal y como en la figura 1.23.

    Se abrirá el diálogo de creación del vinculador HDL. Seleccione Permitir a Vivado administralo
y actualizarlo automaticamente, (Let Vivado manage wrapper and auto-update), Seleccione OK.

    Ésto generará el vinculador HDL de alto nivel para su sistema.

    Todos los archivos fuente para el bloque de Cores de I.P. que fueron usados en el diagrama de
bloques del integrador de Cores de I.P., así como cualquier archivo de restricción, se generará
durante el proceso de sintesis. Como hemos especificado VHDL como el lenguaje de descripción a 
utilizar en el Ej 1A, todos los archivos generados serán en VHDL.

    Con todos los archivos de diseño generados, el siguiente paso es implementar nuestro diseño y
generar el archivo bitstream (trama de bits).

    (ñ) En el navegador de flujo, (Flow Navigator), seleccione generar trama de bits, (generate bitstream), de la
seccion Programa y depuración (Program and Debug). Si la ventana de diálogo aparece para guardar
su diseño, seleccione guardar (Save).

    (o) La ventana de diálogo se abrirá advirtiendole que esta lanzando implementación y sintesis
antes de comenzar el proceso de generación del bitstream. Seleccione SI/Yes para llevar a cabo
el proceso.
    
    La combinacion de ejecución de sistesis, implementación y generación del bitstream uno tras
otro tomará unos cuantos minutos, dependiendo del desempeño de su computadora.

    (p) Una vez que la generación del bitstream finalizo, otra ventana de diálogo se abrirá
confirmandole que el proceso a sido completado existosamente. Ver figura 1.24.

    Seleccione abrir diseño implementado, (Open Implemented Desing), y seleccione OK.

    En este punto se le presentará la vista de diseño, donde puede ver los recursos de la 
seccion de PL que han sido utilizados por el diseño. Con el esquema de colores predeterminado
se muestra en celeste.

    Con el bitstream generado, la construccion de la imagen hardware esta completa. Ahora
la debe exportar a un ambiente software donde se construira un programa para controlar e 
interactuar con el hardware personalizado.

    El paso final en Vivado es de exportar el diseño al SDK, donde se creará el programa que 
le permitirá al la seccion de PS de la Zynq controlar los leds en la placa de desarrollo.

    (q) Seleccione Archivo > Exportar > Exportar hardware, (File>Export>Export hardware), 
desde la barra de menues.

    (r) La ventana de diálogo de exportación de hardware se abrirá. Asegurese de que la opcion
incluir bitstream, (include bitstream), esta seleccionada, tal y como la figura 1.25. Luego 
seleccione OK.

        Nota: Para que la opcion incluir bitstream se habilite, debe de estar activo un
diseño implementado. Por esta razón es que se abrio el diseño implementado en el paso (p).

    (s) Abra el SDK de Vivado al seleccionar Archivo > Abrir SDK, (File> Launch SDK), desde
la barra de menues y seleccione OK.

    Ésto concluye los pasos que son requeridos en el IDE Vivado. Todos los componentes
hardware del sistema han sido configurados y generados. En el siguiente ejercicio crearemos
un componente de software ( ó programa ) simple, el cual controlará el sistema.






 Ejercicio 1C - Creando un programa en el SDK

    En éste ejercicio crearemos un programa simple que controlará los leds sobre la placa
de desarrollo de Zynq. El programa se ejecutará en el sistema de procesamiento Zynq,
osea en el procesador empotrado en silicio que trae el chip de Zynq, y a su vez se 
comunicará con el bloque AXI GPIO que se ejecutará en la seccion de PL. Echaremos un vistaso
a los controladores software que se crearon por el integrador de Cores de I.P. para cada
uno de los modulos de Cores de I.P., antes de contruir y ejecutar el programa sobre la placa
de desarrollo.

    Debió haber abierto el SDK luego de la conclusion del ejercicio 1B. Si no lo abrio,
usted puede abrir el SDK explorando Inicio > Todos los Programas > Xilinx Desing Tools >
SDK 2015.1 > Xilinx SDK 2015.1.

    Al abrir el SDK desde el menu de inicio, usted necesitará especificar el espacio
de trabajo que fue creado cuando el diseño integrador de Cores de I.P. de Vivado ha
exportado en el Ej 1B. El cual debe ser:

    "C:/Zynq_Book/primer_construccion_zynq/primer_construccion_zynq.sdk"

    Ingrese esto en el campo del espacio de trabajo en la ventana de diálogo del lanzador
del espacio de trabajo, tal y como la figura 1.26.

    Con el SDK abierto, podemos comenzar la creación de nuestro programa. Usted ya es capaz
de ver el proyecto de la plataforma hardware, que será automaticamente creado y abierto.
Ahora es necesario añadir un proyecto de programa y un paquete de soporte de placa.

    (a) Seleccione Archivo > Nuevo > Proyecto de Aplicación, (File>New>Application Project),
de la barra de menues.

    (b) Se abrirá la ventana de diálogo de proyecto nuevo. Ingrese prueba_LED en el campo
de nombre de proyecto. Ver figura 1.27. Manteniendo a todas las demás opciones con los
valores predeterminados. Seleccione siguiente (next), preste atención de no presionar
finalizar (Finish).

    (c) Una vez en la pantalla de plantillas de proyecto nuevo seleccione, aplicación
en blanco/ vacía, (Empty Application), figura 1.28, y aqui sí seleccione finalizar (Finish)
para crear el proyecto.

        Nota: El proyecto nuevo debe abrirse automaticamente. Si no lo hace podría
necesitar cerrar la pestaña de bienvenida para ver el proyecto.

    Con el proyecto de aplicación nuevo creado, ahora podemos importar algunos codigos
fuente preconstruidos para la aplicación.

    (d) En el panel Explorador de proyecto, (Project Explorer), abra el elemento prueba_LED,
verá que hay un elemento nombrado 'src'con un icono de una carpeta, seleccionelo
(hagale click izquierdo con el mouse), luego tecla derecha con el mouse
encima de la carpeta y seleccione Importar... (Import...), ver figura 1.29.

    (e) Se abrirá la ventana de importación. Abra la opcion General y haga click izquierdo
 con el mouse sobre Sistema de archivos, (File System), ver figura 1.30, entonces seleccione
siguiente (next).

    (f) En la ventana de diálogo de 'importación' del sistema de archivos, (Import File System),
seleccione el botón navegar/explorar (browse).

    La carpeta de archivos fuente dependerá de la placa de desarrollo Zynq que este
en uso. Si esta utilizando ZedBoard, explore hasta 
"C:/Zynq_Book/sources/zedboard/primer_construccion_zynq", Si esta utilizando ZYBO, explore
hasta "C:/Zynq_Book/sources/zybo/primer_construccion_zynq".

    Seleccione Ok.

    (g) Seleccione "prueba_LED_tut_1C.c", como en la figura 1.31, Seleccione finalizar (Finish).

    El archivo fuente C se exportará y el proyecto se debería construir automaticamente, usted
debería de ver un mensaje similar al de la figura 1.32 en la ventana de Consola.

    (h) Abra el archivo fuente importado al expandir la carpeta 'src' y hacer doble seleccion
sobre "prueba_LED_tut_1C.c", luego explore el codigo.

    Note la instrucción XGpio_Initialize(&Gpio, GPIO_DEVICE_ID); ésta es una función provista
por el controlador de dispositivo de GPIO en el archivo de cabecera xgpio.h . Inicializa la
instancia de XGpio, Gpio, con el unico ID del dispositivo por GPIO_DEVICE_ID.

    Si usted ve hacia arriba en el archivo fuente verá que GPIO_DEVICE_ID está definido como
XPAR_AXI_GPIO_0_DEVICE_ID. El valor de este se puede encontrar al abrir el archivo de cabecera
xparameters.h, el cual es automaticamente generado por el IDE Vivado al exportar un diseño
hardware al SDK. Éste contiene definiciones de todos los paramentros de hardware del sistema.

    La función XGpio_SetDataDirection(&Gpio, LED_CHANNEL, 0x0); tambien es provista por el 
controlador de dispositivo de GPIO y establece la direccion del puerto GPIO especificado. Como
estamos especificando en este caso los LEDs, esta especificando una salida. Bits establecidos
a '0' son salidas y los que estan en '1' son entradas. Como hay 8 leds en la ZedBoard al
configurar la direccion del canal del LED a un  valor de 0x00 (hexa) ó 0b00000000 (binario), 
estamos configurando los 8 leds como salida, lo cual por logica es correcto.

    Similarmente como hay 4 leds en la placa ZYBO, al configurar la direccion del canal LED
un valor de 0x0 (hexa) ó 0b0000 (binario) estamos configurando solo 4 leds como salida,
recordar que solo tenemos 4 leds en la ZYBO a diferencia de la ZedBoard que solo tiene 8.

    Más información de los controladores perisfericos se puede encontrar al seleccionar la
pestaña system.mss . Se provee una lista de todos los perisfericos en el sistema. Junto con
enlaces a documentación disponible y ejemplos, tal como muestra la figura 1.33.

    El siguiente paso es programar la seccion de PL de la Zynq con el archivo bitstream que fué
generado en el Ej 1B.

    (i) Asegurese de que la placa de desarrollo de Zynq esta encendida y que el puerto JTAG
está conectado a la computadora mediante el cable USB-USB. Adicionalmente los puentes en la
placa tambien deben estar correctamente posicinados y asi habilitar el modo JTAG, el cual
le permite al hardware ser programado y accedido por las herramientas de depuración del
sitema.



 | Zed | La ZedBoard requiere de 5 puestes (jumpers - pronunciado 'shampers') para ser
 configurada, ver figura 1.34. Ésta configuración habilita el modo JTAG.


| Zybo | Un único puente en la placa de desarrollo ZYBO. Adicionalmente la fuente de 
alimentacion de la placa es establecida utilizando un puente con la posibilidad de recibir
energía desde el USB, el cargador ó batería. Ambas configuraciones de los puentes de JTAG y
de energía son establecidos en la figura 1.35. La placa ha sido configurada para ser 
alimentada/energizada via USB.


| Ambas | (j) Descarge el bitstream a la seccion de PL de la Zynq al selecionar Harramientas de
Xilinx > Programar FPGA, (Xilinx Tools > Program FPGA), desde la barra de menues. La ventana
de Programación de la FPGA aparecerá. El campo del bitstream ya debe estar completado con
el archivo bitstream correcto, como en la figura 1.36.

    
        Nota: Una vez que el dispositivo ha sido exitosamente programado, el led HECHO (DONE)
sobre la ZedBoard debe ponerse en azul. Similarmente en la ZYBO el led Hecho (DONE) debe ponerse
verde.

    Con la seccion de PL de la Zynq correctamente configurada con el archivo de bitstream, ahora
podemos lanzar nuestro programa sobre la seccion de PS de la Zynq.

    (k) Seleccione el proyecto prueba_LED en el explorador de proyecto. Click derecho y seleccione
ejecutar como > Lanzar en Hardware (GDB), (Run As > Launch in Hardware (GDB)), ver figura 1.37.


 | Zed | Luego de unos pocos segundos los leds en la ZedBoard deben comenzar a destellar entre los
 estados resaltados en la figura 1.38.


| Zybo | Los leds en la ZYBO deben comenzar a destellar entre los estados resaltados en la figura
1.39.


| Ambas | Ha creado y ejecutado exitosamente su primer programa (aplicación software) sobre el
sistema de procesamiento Zynq.

    
    Como resumen un controlador GPIO ha sido implementado existosamente en el genero FPGA de
dispositivos Zynq, formando una coneccion entre el sistema de procesamiento Zynq y los leds
de la placa de desarrollo via una interfaz AXI. El sistema de procesamiento Zynq fué entonces
programado para controlar los leds por medio de un programa de ejecución unitaria (aplicación
software standalone) con la capacidad de interfacear con el controlador de GPIO en el 
genero de FPGA.